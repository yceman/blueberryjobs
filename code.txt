// src/main.rs
use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use my_ats::controllers::candidate_controller;

async fn health_check() -> impl Responder {
    HttpResponse::Ok().body("Serviço ATS rodando!")
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    println!("Iniciando servidor...");
    HttpServer::new(|| {
        App::new()
            .route("/health", web::get().to(health_check))
            .configure(candidate_controller::configure_routes)
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}

// src/controllers/candidate_controller.rs
use actix_web::{web, Responder, HttpResponse};
use my_ats::models::Candidate;
// use my_ats::repositories::candidate_repository; // Supondo que exista

pub fn configure_routes(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::resource("/candidates")
            .route(web::post().to(create_candidate))
            .route(web::get().to(get_all_candidates)),
    );
    cfg.service(
        web::resource("/candidates/{id}")
            .route(web::get().to(get_candidate))
            // .route(web::put().to(update_candidate))
            // .route(web::delete().to(delete_candidate))
    );
}

async fn create_candidate(candidate: web::Json<Candidate>) -> impl Responder {
    // Lógica para salvar o candidato no banco de dados usando o repository
    println!("Recebido novo candidato: {:?}", candidate);
    HttpResponse::Created().json(candidate.into_inner())
}

async fn get_candidate(path: web::Path<i32>) -> impl Responder {
    let candidate_id = path.into_inner();
    // Lógica para buscar o candidato pelo ID no banco de dados
    HttpResponse::Ok().body(format!("Detalhes do candidato com ID: {}", candidate_id))
}

async fn get_all_candidates() -> impl Responder {
    // Lógica para buscar todos os candidatos do banco de dados
    HttpResponse::Ok().body("Lista de todos os candidatos")
}

// src/models/candidate.rs
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Candidate {
    pub id: Option<i32>,
    pub name: String,
    pub email: String,
    // Outros campos relevantes
}